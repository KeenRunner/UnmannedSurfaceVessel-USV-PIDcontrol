// Generated by gencpp from file ublox_msgs/NavTIMEGPS.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_NAVTIMEGPS_H
#define UBLOX_MSGS_MESSAGE_NAVTIMEGPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msgs
{
template <class ContainerAllocator>
struct NavTIMEGPS_
{
  typedef NavTIMEGPS_<ContainerAllocator> Type;

  NavTIMEGPS_()
    : iTOW(0)
    , fTOW(0)
    , week(0)
    , leapS(0)
    , valid(0)
    , tAcc(0)  {
    }
  NavTIMEGPS_(const ContainerAllocator& _alloc)
    : iTOW(0)
    , fTOW(0)
    , week(0)
    , leapS(0)
    , valid(0)
    , tAcc(0)  {
  (void)_alloc;
    }



   typedef uint32_t _iTOW_type;
  _iTOW_type iTOW;

   typedef int32_t _fTOW_type;
  _fTOW_type fTOW;

   typedef int16_t _week_type;
  _week_type week;

   typedef int8_t _leapS_type;
  _leapS_type leapS;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint32_t _tAcc_type;
  _tAcc_type tAcc;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CLASS_ID)
  #undef CLASS_ID
#endif
#if defined(_WIN32) && defined(MESSAGE_ID)
  #undef MESSAGE_ID
#endif
#if defined(_WIN32) && defined(VALID_TOW)
  #undef VALID_TOW
#endif
#if defined(_WIN32) && defined(VALID_WEEK)
  #undef VALID_WEEK
#endif
#if defined(_WIN32) && defined(VALID_LEAP_S)
  #undef VALID_LEAP_S
#endif

  enum {
    CLASS_ID = 1u,
    MESSAGE_ID = 32u,
    VALID_TOW = 1u,
    VALID_WEEK = 2u,
    VALID_LEAP_S = 4u,
  };


  typedef boost::shared_ptr< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> const> ConstPtr;

}; // struct NavTIMEGPS_

typedef ::ublox_msgs::NavTIMEGPS_<std::allocator<void> > NavTIMEGPS;

typedef boost::shared_ptr< ::ublox_msgs::NavTIMEGPS > NavTIMEGPSPtr;
typedef boost::shared_ptr< ::ublox_msgs::NavTIMEGPS const> NavTIMEGPSConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator1> & lhs, const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator2> & rhs)
{
  return lhs.iTOW == rhs.iTOW &&
    lhs.fTOW == rhs.fTOW &&
    lhs.week == rhs.week &&
    lhs.leapS == rhs.leapS &&
    lhs.valid == rhs.valid &&
    lhs.tAcc == rhs.tAcc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator1> & lhs, const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94098180ac3e5e36144a6337c1462f46";
  }

  static const char* value(const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94098180ac3e5e36ULL;
  static const uint64_t static_value2 = 0x144a6337c1462f46ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/NavTIMEGPS";
  }

  static const char* value(const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# NAV-TIMEGPS (0x01 0x20)\n"
"# GPS Time Solution\n"
"#\n"
"\n"
"uint8 CLASS_ID = 1\n"
"uint8 MESSAGE_ID = 32\n"
"\n"
"uint32 iTOW             # GPS Millisecond time of week [ms]\n"
"int32 fTOW              # Fractional Nanoseconds remainder of rounded\n"
"                        # ms above, range -500000 .. 500000 [ns]\n"
"int16 week              # GPS week (GPS time)\n"
"\n"
"int8 leapS              # Leap Seconds (GPS-UTC) [s]\n"
"\n"
"uint8 valid             # Validity Flags\n"
"uint8 VALID_TOW = 1        # Valid Time of Week\n"
"uint8 VALID_WEEK = 2       # Valid Week Number\n"
"uint8 VALID_LEAP_S = 4     # Valid Leap Seconds\n"
"\n"
"uint32 tAcc             # Time Accuracy Estimate [ns]\n"
;
  }

  static const char* value(const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.iTOW);
      stream.next(m.fTOW);
      stream.next(m.week);
      stream.next(m.leapS);
      stream.next(m.valid);
      stream.next(m.tAcc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavTIMEGPS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::NavTIMEGPS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::NavTIMEGPS_<ContainerAllocator>& v)
  {
    s << indent << "iTOW: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iTOW);
    s << indent << "fTOW: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fTOW);
    s << indent << "week: ";
    Printer<int16_t>::stream(s, indent + "  ", v.week);
    s << indent << "leapS: ";
    Printer<int8_t>::stream(s, indent + "  ", v.leapS);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "tAcc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tAcc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_NAVTIMEGPS_H
