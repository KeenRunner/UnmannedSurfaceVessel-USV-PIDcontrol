// Generated by gencpp from file ublox_msgs/TimTM2.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_TIMTM2_H
#define UBLOX_MSGS_MESSAGE_TIMTM2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msgs
{
template <class ContainerAllocator>
struct TimTM2_
{
  typedef TimTM2_<ContainerAllocator> Type;

  TimTM2_()
    : ch(0)
    , flags(0)
    , risingEdgeCount(0)
    , wnR(0)
    , wnF(0)
    , towMsR(0)
    , towSubMsR(0)
    , towMsF(0)
    , towSubMsF(0)
    , accEst(0)  {
    }
  TimTM2_(const ContainerAllocator& _alloc)
    : ch(0)
    , flags(0)
    , risingEdgeCount(0)
    , wnR(0)
    , wnF(0)
    , towMsR(0)
    , towSubMsR(0)
    , towMsF(0)
    , towSubMsF(0)
    , accEst(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ch_type;
  _ch_type ch;

   typedef uint8_t _flags_type;
  _flags_type flags;

   typedef uint16_t _risingEdgeCount_type;
  _risingEdgeCount_type risingEdgeCount;

   typedef uint16_t _wnR_type;
  _wnR_type wnR;

   typedef uint16_t _wnF_type;
  _wnF_type wnF;

   typedef uint32_t _towMsR_type;
  _towMsR_type towMsR;

   typedef uint32_t _towSubMsR_type;
  _towSubMsR_type towSubMsR;

   typedef uint32_t _towMsF_type;
  _towMsF_type towMsF;

   typedef uint32_t _towSubMsF_type;
  _towSubMsF_type towSubMsF;

   typedef uint32_t _accEst_type;
  _accEst_type accEst;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CLASS_ID)
  #undef CLASS_ID
#endif
#if defined(_WIN32) && defined(MESSAGE_ID)
  #undef MESSAGE_ID
#endif
#if defined(_WIN32) && defined(FLAGS_MODE_RUNNING)
  #undef FLAGS_MODE_RUNNING
#endif
#if defined(_WIN32) && defined(FLAGS_RUN)
  #undef FLAGS_RUN
#endif
#if defined(_WIN32) && defined(FLAGS_NEWFALLINGEDGE)
  #undef FLAGS_NEWFALLINGEDGE
#endif
#if defined(_WIN32) && defined(FLAGS_TIMEBASE_GNSS)
  #undef FLAGS_TIMEBASE_GNSS
#endif
#if defined(_WIN32) && defined(FLAGS_TIMEBASE_UTC)
  #undef FLAGS_TIMEBASE_UTC
#endif
#if defined(_WIN32) && defined(FLAGS_UTC_AVAIL)
  #undef FLAGS_UTC_AVAIL
#endif
#if defined(_WIN32) && defined(FLAGS_TIME_VALID)
  #undef FLAGS_TIME_VALID
#endif
#if defined(_WIN32) && defined(FLAGS_NEWRISINGEDGE)
  #undef FLAGS_NEWRISINGEDGE
#endif

  enum {
    CLASS_ID = 13u,
    MESSAGE_ID = 3u,
    FLAGS_MODE_RUNNING = 1u,
    FLAGS_RUN = 2u,
    FLAGS_NEWFALLINGEDGE = 4u,
    FLAGS_TIMEBASE_GNSS = 8u,
    FLAGS_TIMEBASE_UTC = 16u,
    FLAGS_UTC_AVAIL = 32u,
    FLAGS_TIME_VALID = 64u,
    FLAGS_NEWRISINGEDGE = 128u,
  };


  typedef boost::shared_ptr< ::ublox_msgs::TimTM2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::TimTM2_<ContainerAllocator> const> ConstPtr;

}; // struct TimTM2_

typedef ::ublox_msgs::TimTM2_<std::allocator<void> > TimTM2;

typedef boost::shared_ptr< ::ublox_msgs::TimTM2 > TimTM2Ptr;
typedef boost::shared_ptr< ::ublox_msgs::TimTM2 const> TimTM2ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::TimTM2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::TimTM2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ublox_msgs::TimTM2_<ContainerAllocator1> & lhs, const ::ublox_msgs::TimTM2_<ContainerAllocator2> & rhs)
{
  return lhs.ch == rhs.ch &&
    lhs.flags == rhs.flags &&
    lhs.risingEdgeCount == rhs.risingEdgeCount &&
    lhs.wnR == rhs.wnR &&
    lhs.wnF == rhs.wnF &&
    lhs.towMsR == rhs.towMsR &&
    lhs.towSubMsR == rhs.towSubMsR &&
    lhs.towMsF == rhs.towMsF &&
    lhs.towSubMsF == rhs.towSubMsF &&
    lhs.accEst == rhs.accEst;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ublox_msgs::TimTM2_<ContainerAllocator1> & lhs, const ::ublox_msgs::TimTM2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::TimTM2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::TimTM2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::TimTM2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::TimTM2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::TimTM2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::TimTM2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::TimTM2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aae2d427845426ce522cb55dffc19b63";
  }

  static const char* value(const ::ublox_msgs::TimTM2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaae2d427845426ceULL;
  static const uint64_t static_value2 = 0x522cb55dffc19b63ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::TimTM2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/TimTM2";
  }

  static const char* value(const ::ublox_msgs::TimTM2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::TimTM2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# TIM-TM2 (0x0D, 0x03)\n"
"# Time mark data \n"
"#\n"
"# Description for details.\n"
"# \n"
"# Supported on:\n"
"#  - u-blox 8 / u-blox M8 with protocol version 22 (only with Timing Products)\n"
"#\n"
"\n"
"uint8 CLASS_ID = 13 \n"
"uint8 MESSAGE_ID = 3\n"
"\n"
"uint8 ch                     # Channel (i.e. EXTINT) upon which the pulse was measured\n"
"\n"
"uint8 flags                   # Bitmask [newRisingEdge, time, utc, timeBase, , newFallingEdge, run, mode]\n"
"uint8 FLAGS_MODE_RUNNING = 1  # single = 0, running = 1\n"
"uint8 FLAGS_RUN = 2		# armed = 0, stopped = 1\n"
"uint8 FLAGS_NEWFALLINGEDGE = 4 	# new falling edge detected\n"
"uint8 FLAGS_TIMEBASE_GNSS = 8	# 0 = time base is receiver time, 1 = time base is GNSS Time (according to the configuration in CFG-TP5 for tpldx= 0)\n"
"uint8 FLAGS_TIMEBASE_UTC = 16	# Time Base is UTC (the variant according to the configuration in CFG-NAV5\n"
"uint8 FLAGS_UTC_AVAIL = 32	# 0 = utc not available, 1 = utc available\n"
"uint8 FLAGS_TIME_VALID = 64	# 0 = time is not valid, 1 time is valid\n"
"uint8 FLAGS_NEWRISINGEDGE = 128	# new rising edge detected\n"
"\n"
"uint16 risingEdgeCount		# rising edge count\n"
"uint16 wnR			# week number of last rising edge\n"
"uint16 wnF			# week number of last falling edge\n"
"uint32 towMsR			# Tow of rising edge \n"
"uint32 towSubMsR		# Millisecond Fraction of Tow of rising edge in nanoseconds\n"
"uint32 towMsF			# tow of falling edge\n"
"uint32 towSubMsF		# millisecond fraction of tow of falling edge in nanoseconds\n"
"uint32 accEst			# Accuracy estimate\n"
;
  }

  static const char* value(const ::ublox_msgs::TimTM2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::TimTM2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ch);
      stream.next(m.flags);
      stream.next(m.risingEdgeCount);
      stream.next(m.wnR);
      stream.next(m.wnF);
      stream.next(m.towMsR);
      stream.next(m.towSubMsR);
      stream.next(m.towMsF);
      stream.next(m.towSubMsF);
      stream.next(m.accEst);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimTM2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::TimTM2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::TimTM2_<ContainerAllocator>& v)
  {
    s << indent << "ch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ch);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
    s << indent << "risingEdgeCount: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.risingEdgeCount);
    s << indent << "wnR: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wnR);
    s << indent << "wnF: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wnF);
    s << indent << "towMsR: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.towMsR);
    s << indent << "towSubMsR: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.towSubMsR);
    s << indent << "towMsF: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.towMsF);
    s << indent << "towSubMsF: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.towSubMsF);
    s << indent << "accEst: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.accEst);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_TIMTM2_H
