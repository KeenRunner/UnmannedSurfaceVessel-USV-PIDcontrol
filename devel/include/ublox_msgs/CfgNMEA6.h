// Generated by gencpp from file ublox_msgs/CfgNMEA6.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_CFGNMEA6_H
#define UBLOX_MSGS_MESSAGE_CFGNMEA6_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msgs
{
template <class ContainerAllocator>
struct CfgNMEA6_
{
  typedef CfgNMEA6_<ContainerAllocator> Type;

  CfgNMEA6_()
    : filter(0)
    , version(0)
    , numSV(0)
    , flags(0)  {
    }
  CfgNMEA6_(const ContainerAllocator& _alloc)
    : filter(0)
    , version(0)
    , numSV(0)
    , flags(0)  {
  (void)_alloc;
    }



   typedef uint8_t _filter_type;
  _filter_type filter;

   typedef uint8_t _version_type;
  _version_type version;

   typedef uint8_t _numSV_type;
  _numSV_type numSV;

   typedef uint8_t _flags_type;
  _flags_type flags;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CLASS_ID)
  #undef CLASS_ID
#endif
#if defined(_WIN32) && defined(MESSAGE_ID)
  #undef MESSAGE_ID
#endif
#if defined(_WIN32) && defined(FILTER_POS)
  #undef FILTER_POS
#endif
#if defined(_WIN32) && defined(FILTER_MSK_POS)
  #undef FILTER_MSK_POS
#endif
#if defined(_WIN32) && defined(FILTER_TIME)
  #undef FILTER_TIME
#endif
#if defined(_WIN32) && defined(FILTER_DATE)
  #undef FILTER_DATE
#endif
#if defined(_WIN32) && defined(FILTER_SBAS_FILT)
  #undef FILTER_SBAS_FILT
#endif
#if defined(_WIN32) && defined(FILTER_TRACK)
  #undef FILTER_TRACK
#endif
#if defined(_WIN32) && defined(NMEA_VERSION_2_3)
  #undef NMEA_VERSION_2_3
#endif
#if defined(_WIN32) && defined(NMEA_VERSION_2_1)
  #undef NMEA_VERSION_2_1
#endif
#if defined(_WIN32) && defined(FLAGS_COMPAT)
  #undef FLAGS_COMPAT
#endif
#if defined(_WIN32) && defined(FLAGS_CONSIDER)
  #undef FLAGS_CONSIDER
#endif

  enum {
    CLASS_ID = 6u,
    MESSAGE_ID = 23u,
    FILTER_POS = 1u,
    FILTER_MSK_POS = 2u,
    FILTER_TIME = 4u,
    FILTER_DATE = 8u,
    FILTER_SBAS_FILT = 16u,
    FILTER_TRACK = 32u,
    NMEA_VERSION_2_3 = 35u,
    NMEA_VERSION_2_1 = 33u,
    FLAGS_COMPAT = 1u,
    FLAGS_CONSIDER = 2u,
  };


  typedef boost::shared_ptr< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> const> ConstPtr;

}; // struct CfgNMEA6_

typedef ::ublox_msgs::CfgNMEA6_<std::allocator<void> > CfgNMEA6;

typedef boost::shared_ptr< ::ublox_msgs::CfgNMEA6 > CfgNMEA6Ptr;
typedef boost::shared_ptr< ::ublox_msgs::CfgNMEA6 const> CfgNMEA6ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::CfgNMEA6_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ublox_msgs::CfgNMEA6_<ContainerAllocator1> & lhs, const ::ublox_msgs::CfgNMEA6_<ContainerAllocator2> & rhs)
{
  return lhs.filter == rhs.filter &&
    lhs.version == rhs.version &&
    lhs.numSV == rhs.numSV &&
    lhs.flags == rhs.flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ublox_msgs::CfgNMEA6_<ContainerAllocator1> & lhs, const ::ublox_msgs::CfgNMEA6_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ffbd21c832ce4472519430326bb44e3";
  }

  static const char* value(const ::ublox_msgs::CfgNMEA6_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ffbd21c832ce447ULL;
  static const uint64_t static_value2 = 0x2519430326bb44e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/CfgNMEA6";
  }

  static const char* value(const ::ublox_msgs::CfgNMEA6_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# CFG-NMEA (0x06 0x17)\n"
"# NMEA protocol configuration\n"
"#\n"
"# Set/Get the NMEA protocol configuration. See section NMEA Protocol \n"
"# Configuration for a detailed description of the configuration effects on \n"
"# NMEA output\n"
"#\n"
"# Supported on u-blox 6 from firmware version 6.00 up to version 7.03.\n"
"#\n"
"\n"
"uint8 CLASS_ID = 6\n"
"uint8 MESSAGE_ID = 23 \n"
"\n"
"uint8 filter                  # filter flags\n"
"uint8 FILTER_POS = 1          # Disable position filtering\n"
"uint8 FILTER_MSK_POS = 2      # Disable masked position filtering\n"
"uint8 FILTER_TIME = 4         # Disable time filtering\n"
"uint8 FILTER_DATE = 8         # Disable date filtering\n"
"uint8 FILTER_SBAS_FILT = 16   # Enable SBAS filtering\n"
"uint8 FILTER_TRACK = 32       # Disable track filtering\n"
"\n"
"uint8 version             # NMEA version\n"
"uint8 NMEA_VERSION_2_3 = 35     # Version 2.3\n"
"uint8 NMEA_VERSION_2_1 = 33     # Version 2.1\n"
"\n"
"uint8 numSV                   # Maximum Number of SVs to report in NMEA\n"
"                              # protocol.\n"
"                              # This does not affect the receiver's operation.\n"
"                              # It only limits the number of SVs reported in\n"
"                              # NMEA mode (this might be needed with older\n"
"                              # mapping applications which only support 8- or\n"
"                              # 12-channel receivers)\n"
"\n"
"uint8 flags                   # flags\n"
"uint8 FLAGS_COMPAT = 1          # enable compatibility mode.\n"
"                                # This might be needed for certain applications  \n"
"                                # when customer's NMEA parser expects a fixed \n"
"                                # number of  digits in position coordinates\n"
"uint8 FLAGS_CONSIDER = 2        # enable considering mode\n"
;
  }

  static const char* value(const ::ublox_msgs::CfgNMEA6_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filter);
      stream.next(m.version);
      stream.next(m.numSV);
      stream.next(m.flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CfgNMEA6_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::CfgNMEA6_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::CfgNMEA6_<ContainerAllocator>& v)
  {
    s << indent << "filter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.filter);
    s << indent << "version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version);
    s << indent << "numSV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.numSV);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_CFGNMEA6_H
