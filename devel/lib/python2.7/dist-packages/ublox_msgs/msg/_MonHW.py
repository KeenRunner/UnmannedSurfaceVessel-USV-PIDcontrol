# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/MonHW.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MonHW(genpy.Message):
  _md5sum = "605e9f0118e26136185358e2b10a0913"
  _type = "ublox_msgs/MonHW"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# MON-HW (0x0A 0x09)
# Hardware Status
#
# Status of different aspect of the hardware, such as Antenna, PIO/Peripheral 
# Pins, Noise Level, Automatic Gain Control (AGC)
#
# WARNING: this message is a different length than the MonHW message for
# firmware version 6

uint8 CLASS_ID = 10
uint8 MESSAGE_ID = 9

uint32 pinSel                 # Mask of Pins Set as Peripheral/PIO
uint32 pinBank                # Mask of Pins Set as Bank A/B
uint32 pinDir                 # Mask of Pins Set as Input/Output
uint32 pinVal                 # Mask of Pins Value Low/High
uint16 noisePerMS             # Noise Level as measured by the GPS Core
uint16 agcCnt                 # AGC Monitor (counts SIGHI xor SIGLO, 
                              # range 0 to 8191)
uint8 aStatus                 # Status of the Antenna Supervisor State Machine 
uint8 A_STATUS_INIT = 0
uint8 A_STATUS_UNKNOWN = 1
uint8 A_STATUS_OK = 2
uint8 A_STATUS_SHORT = 3
uint8 A_STATUS_OPEN = 4

uint8 aPower                  # Current PowerStatus of Antenna 
uint8 A_POWER_OFF = 0 
uint8 A_POWER_ON = 1
uint8 A_POWER_UNKNOWN = 2

uint8 flags                   # Flags:
uint8 FLAGS_RTC_CALIB = 1            # RTC is calibrated
uint8 FLAGS_SAFE_BOOT =  2           # Safe boot mode (0 = inactive, 1 = active)
uint8 FLAGS_JAMMING_STATE_MASK = 12  # output from Jamming/Interference Monitor: 
uint8 JAMMING_STATE_UNKNOWN_OR_DISABLED = 0   # unknown or feature disabled
uint8 JAMMING_STATE_OK = 4                    # ok - no significant jamming
uint8 JAMMING_STATE_WARNING = 8               # interference visible but fix OK
uint8 JAMMING_STATE_CRITICAL = 12             # interference visible and no fix
uint8 FLAGS_XTAL_ABSENT =  16        # RTC XTAL is absent
                                     # (not supported in protocol versions < 18)
uint8 reserved0               # Reserved
uint32 usedMask               # Mask of Pins that are used by the Virtual Pin 
                              # Manager
uint8[17] VP                  # Array of Pin Mappings for each of the 17  
                              # Physical Pins
uint8 jamInd                  # CW Jamming indicator, scaled:
uint8 JAM_IND_NONE = 0          # No CW Jamming
uint8 JAM_IND_STRONG = 255      # Strong CW Jamming    

uint8[2] reserved1            # Reserved

uint32 pinIrq                 # Mask of Pins Value using the PIO Irq
uint32 pullH                  # Mask of Pins Value using the PIO Pull High 
                              # Resistor
uint32 pullL                  # Mask of Pins Value using the PIO Pull Low 
                              # Resistor
"""
  # Pseudo-constants
  CLASS_ID = 10
  MESSAGE_ID = 9
  A_STATUS_INIT = 0
  A_STATUS_UNKNOWN = 1
  A_STATUS_OK = 2
  A_STATUS_SHORT = 3
  A_STATUS_OPEN = 4
  A_POWER_OFF = 0
  A_POWER_ON = 1
  A_POWER_UNKNOWN = 2
  FLAGS_RTC_CALIB = 1
  FLAGS_SAFE_BOOT = 2
  FLAGS_JAMMING_STATE_MASK = 12
  JAMMING_STATE_UNKNOWN_OR_DISABLED = 0
  JAMMING_STATE_OK = 4
  JAMMING_STATE_WARNING = 8
  JAMMING_STATE_CRITICAL = 12
  FLAGS_XTAL_ABSENT = 16
  JAM_IND_NONE = 0
  JAM_IND_STRONG = 255

  __slots__ = ['pinSel','pinBank','pinDir','pinVal','noisePerMS','agcCnt','aStatus','aPower','flags','reserved0','usedMask','VP','jamInd','reserved1','pinIrq','pullH','pullL']
  _slot_types = ['uint32','uint32','uint32','uint32','uint16','uint16','uint8','uint8','uint8','uint8','uint32','uint8[17]','uint8','uint8[2]','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pinSel,pinBank,pinDir,pinVal,noisePerMS,agcCnt,aStatus,aPower,flags,reserved0,usedMask,VP,jamInd,reserved1,pinIrq,pullH,pullL

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MonHW, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pinSel is None:
        self.pinSel = 0
      if self.pinBank is None:
        self.pinBank = 0
      if self.pinDir is None:
        self.pinDir = 0
      if self.pinVal is None:
        self.pinVal = 0
      if self.noisePerMS is None:
        self.noisePerMS = 0
      if self.agcCnt is None:
        self.agcCnt = 0
      if self.aStatus is None:
        self.aStatus = 0
      if self.aPower is None:
        self.aPower = 0
      if self.flags is None:
        self.flags = 0
      if self.reserved0 is None:
        self.reserved0 = 0
      if self.usedMask is None:
        self.usedMask = 0
      if self.VP is None:
        self.VP = b'\0'*17
      if self.jamInd is None:
        self.jamInd = 0
      if self.reserved1 is None:
        self.reserved1 = b'\0'*2
      if self.pinIrq is None:
        self.pinIrq = 0
      if self.pullH is None:
        self.pullH = 0
      if self.pullL is None:
        self.pullL = 0
    else:
      self.pinSel = 0
      self.pinBank = 0
      self.pinDir = 0
      self.pinVal = 0
      self.noisePerMS = 0
      self.agcCnt = 0
      self.aStatus = 0
      self.aPower = 0
      self.flags = 0
      self.reserved0 = 0
      self.usedMask = 0
      self.VP = b'\0'*17
      self.jamInd = 0
      self.reserved1 = b'\0'*2
      self.pinIrq = 0
      self.pullH = 0
      self.pullL = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4I2H4BI().pack(_x.pinSel, _x.pinBank, _x.pinDir, _x.pinVal, _x.noisePerMS, _x.agcCnt, _x.aStatus, _x.aPower, _x.flags, _x.reserved0, _x.usedMask))
      _x = self.VP
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_17B().pack(*_x))
      else:
        buff.write(_get_struct_17s().pack(_x))
      _x = self.jamInd
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pinIrq, _x.pullH, _x.pullL))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.pinSel, _x.pinBank, _x.pinDir, _x.pinVal, _x.noisePerMS, _x.agcCnt, _x.aStatus, _x.aPower, _x.flags, _x.reserved0, _x.usedMask,) = _get_struct_4I2H4BI().unpack(str[start:end])
      start = end
      end += 17
      self.VP = str[start:end]
      start = end
      end += 1
      (self.jamInd,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved1 = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pinIrq, _x.pullH, _x.pullL,) = _get_struct_3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4I2H4BI().pack(_x.pinSel, _x.pinBank, _x.pinDir, _x.pinVal, _x.noisePerMS, _x.agcCnt, _x.aStatus, _x.aPower, _x.flags, _x.reserved0, _x.usedMask))
      _x = self.VP
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_17B().pack(*_x))
      else:
        buff.write(_get_struct_17s().pack(_x))
      _x = self.jamInd
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pinIrq, _x.pullH, _x.pullL))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.pinSel, _x.pinBank, _x.pinDir, _x.pinVal, _x.noisePerMS, _x.agcCnt, _x.aStatus, _x.aPower, _x.flags, _x.reserved0, _x.usedMask,) = _get_struct_4I2H4BI().unpack(str[start:end])
      start = end
      end += 17
      self.VP = str[start:end]
      start = end
      end += 1
      (self.jamInd,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved1 = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pinIrq, _x.pullH, _x.pullL,) = _get_struct_3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B
_struct_17s = None
def _get_struct_17s():
    global _struct_17s
    if _struct_17s is None:
        _struct_17s = struct.Struct("<17s")
    return _struct_17s
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4I2H4BI = None
def _get_struct_4I2H4BI():
    global _struct_4I2H4BI
    if _struct_4I2H4BI is None:
        _struct_4I2H4BI = struct.Struct("<4I2H4BI")
    return _struct_4I2H4BI
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
