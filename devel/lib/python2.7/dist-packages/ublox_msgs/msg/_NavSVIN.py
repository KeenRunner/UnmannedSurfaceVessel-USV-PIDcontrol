# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/NavSVIN.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavSVIN(genpy.Message):
  _md5sum = "c78016f30ce026b9e670e40dd151a8ac"
  _type = "ublox_msgs/NavSVIN"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# NAV-SVIN (0x01 0x3B)
# Survey-in data
# 
# This message contains information about survey-in parameters.
# Supported on:
#  - u-blox 8 / u-blox M8 with protocol version 20 (only with High Precision
#    GNSS products)

uint8 CLASS_ID = 1
uint8 MESSAGE_ID = 59

uint8 version           # Message version (0x00 for this version)
uint8[3] reserved0      # Reserved

uint32 iTOW             # GPS time of week of the navigation epoch [ms]

uint32 dur              # Passed survey-in observation time [s]

int32 meanX             # Current survey-in mean position ECEF X coordinate [cm]
int32 meanY             # Current survey-in mean position ECEF Y coordinate [cm]
int32 meanZ             # Current survey-in mean position ECEF Z coordinate [cm]

int8 meanXHP            # Current high-precision survey-in mean position
                        # ECEF X coordinate. 0.1_mm 
                        # Must be in the range -99..+99.
                        # The current survey-in mean position ECEF X
                        # coordinate, in units of cm, is given by
                        # meanX + (0.01 * meanXHP)
int8 meanYHP            # Current high-precision survey-in mean position
                        # ECEF Y coordinate. [0.1 mm] 
                        # Must be in the range -99..+99.
                        # The current survey-in mean position ECEF Y
                        # coordinate, in units of cm, is given by
                        # meanY + (0.01 * meanYHP)
int8 meanZHP            # Current high-precision survey-in mean position
                        # ECEF Z coordinate. [0.1 mm] 
                        # Must be in the range -99..+99.
                        # The current survey-in mean position ECEF Z
                        # coordinate, in units of cm, is given by
                        # meanZ + (0.01 * meanZHP)

uint8 reserved1         # Reserved

uint32 meanAcc          # Current survey-in mean position accuracy [0.1 mm]
uint32 obs              # Number of position observations used during survey-in
uint8 valid             # Survey-in position validity flag, 1 = valid
                        # otherwise 0
uint8 active            # Survey-in in progress flag, 1 = in-progress
                        # otherwise 0

uint8[2] reserved3      # Reserved"""
  # Pseudo-constants
  CLASS_ID = 1
  MESSAGE_ID = 59

  __slots__ = ['version','reserved0','iTOW','dur','meanX','meanY','meanZ','meanXHP','meanYHP','meanZHP','reserved1','meanAcc','obs','valid','active','reserved3']
  _slot_types = ['uint8','uint8[3]','uint32','uint32','int32','int32','int32','int8','int8','int8','uint8','uint32','uint32','uint8','uint8','uint8[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       version,reserved0,iTOW,dur,meanX,meanY,meanZ,meanXHP,meanYHP,meanZHP,reserved1,meanAcc,obs,valid,active,reserved3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavSVIN, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.version is None:
        self.version = 0
      if self.reserved0 is None:
        self.reserved0 = b'\0'*3
      if self.iTOW is None:
        self.iTOW = 0
      if self.dur is None:
        self.dur = 0
      if self.meanX is None:
        self.meanX = 0
      if self.meanY is None:
        self.meanY = 0
      if self.meanZ is None:
        self.meanZ = 0
      if self.meanXHP is None:
        self.meanXHP = 0
      if self.meanYHP is None:
        self.meanYHP = 0
      if self.meanZHP is None:
        self.meanZHP = 0
      if self.reserved1 is None:
        self.reserved1 = 0
      if self.meanAcc is None:
        self.meanAcc = 0
      if self.obs is None:
        self.obs = 0
      if self.valid is None:
        self.valid = 0
      if self.active is None:
        self.active = 0
      if self.reserved3 is None:
        self.reserved3 = b'\0'*2
    else:
      self.version = 0
      self.reserved0 = b'\0'*3
      self.iTOW = 0
      self.dur = 0
      self.meanX = 0
      self.meanY = 0
      self.meanZ = 0
      self.meanXHP = 0
      self.meanYHP = 0
      self.meanZHP = 0
      self.reserved1 = 0
      self.meanAcc = 0
      self.obs = 0
      self.valid = 0
      self.active = 0
      self.reserved3 = b'\0'*2

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.version
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
      _x = self
      buff.write(_get_struct_2I3i3bB2I2B().pack(_x.iTOW, _x.dur, _x.meanX, _x.meanY, _x.meanZ, _x.meanXHP, _x.meanYHP, _x.meanZHP, _x.reserved1, _x.meanAcc, _x.obs, _x.valid, _x.active))
      _x = self.reserved3
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.version,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved0 = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.iTOW, _x.dur, _x.meanX, _x.meanY, _x.meanZ, _x.meanXHP, _x.meanYHP, _x.meanZHP, _x.reserved1, _x.meanAcc, _x.obs, _x.valid, _x.active,) = _get_struct_2I3i3bB2I2B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved3 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.version
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
      _x = self
      buff.write(_get_struct_2I3i3bB2I2B().pack(_x.iTOW, _x.dur, _x.meanX, _x.meanY, _x.meanZ, _x.meanXHP, _x.meanYHP, _x.meanZHP, _x.reserved1, _x.meanAcc, _x.obs, _x.valid, _x.active))
      _x = self.reserved3
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.version,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved0 = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.iTOW, _x.dur, _x.meanX, _x.meanY, _x.meanZ, _x.meanXHP, _x.meanYHP, _x.meanZHP, _x.reserved1, _x.meanAcc, _x.obs, _x.valid, _x.active,) = _get_struct_2I3i3bB2I2B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved3 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2I3i3bB2I2B = None
def _get_struct_2I3i3bB2I2B():
    global _struct_2I3i3bB2I2B
    if _struct_2I3i3bB2I2B is None:
        _struct_2I3i3bB2I2B = struct.Struct("<2I3i3bB2I2B")
    return _struct_2I3i3bB2I2B
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3s = None
def _get_struct_3s():
    global _struct_3s
    if _struct_3s is None:
        _struct_3s = struct.Struct("<3s")
    return _struct_3s
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
