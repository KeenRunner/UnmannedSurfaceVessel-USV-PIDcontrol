# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/NavTIMEUTC.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavTIMEUTC(genpy.Message):
  _md5sum = "bd39089655ebb13ff8d01cbe3a087db1"
  _type = "ublox_msgs/NavTIMEUTC"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# NAV-TIMEUTC (0x01 0x21)
# UTC Time Solution
#

uint8 CLASS_ID = 1
uint8 MESSAGE_ID = 33

uint32 iTOW             # GPS Millisecond time of week [ms]

uint32 tAcc             # Time Accuracy Estimate [ns]
int32 nano              # Fraction of second, range -1e9 .. 1e9 (UTC) [ns]
uint16 year             # Year, range 1999..2099 (UTC) [y]
uint8 month             # Month, range 1..12 (UTC) [month]
uint8 day               # Day of Month, range 1..31 (UTC) [d]
uint8 hour              # Hour of Day, range 0..23 (UTC) [h]
uint8 min               # Minute of Hour, range 0..59 (UTC) [min]
uint8 sec               # Seconds of Minute, range 0..60 (UTC) [s] (60 for 
                        # leap second)

uint8 valid             # Validity Flags
uint8 VALID_TOW = 1         # Valid Time of Week
uint8 VALID_WKN = 2         # Valid Week Number
uint8 VALID_UTC = 4         # Valid Leap Seconds, i.e. Leap Seconds already known
uint8 VALID_UTC_STANDARD_MASK = 240  # UTC standard Identifier Bit mask:
uint8 UTC_STANDARD_NOT_AVAILABLE = 0    # Information not available
uint8 UTC_STANDARD_CRL = 16             # Communications Research Labratory
uint8 UTC_STANDARD_NIST = 32            # National Institute of Standards and 
                                        # Technology (NIST)
uint8 UTC_STANDARD_USNO = 48            # U.S. Naval Observatory (USNO)
uint8 UTC_STANDARD_BIPM = 64            # International Bureau of Weights and 
                                        # Measures (BIPM)
uint8 UTC_STANDARD_EL = 80              # European Laboratory (tbd)
uint8 UTC_STANDARD_SU = 96              # Former Soviet Union (SU)
uint8 UTC_STANDARD_NTSC = 112           # National Time Service Center, China
uint8 UTC_STANDARD_UNKNOWN = 240"""
  # Pseudo-constants
  CLASS_ID = 1
  MESSAGE_ID = 33
  VALID_TOW = 1
  VALID_WKN = 2
  VALID_UTC = 4
  VALID_UTC_STANDARD_MASK = 240
  UTC_STANDARD_NOT_AVAILABLE = 0
  UTC_STANDARD_CRL = 16
  UTC_STANDARD_NIST = 32
  UTC_STANDARD_USNO = 48
  UTC_STANDARD_BIPM = 64
  UTC_STANDARD_EL = 80
  UTC_STANDARD_SU = 96
  UTC_STANDARD_NTSC = 112
  UTC_STANDARD_UNKNOWN = 240

  __slots__ = ['iTOW','tAcc','nano','year','month','day','hour','min','sec','valid']
  _slot_types = ['uint32','uint32','int32','uint16','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       iTOW,tAcc,nano,year,month,day,hour,min,sec,valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavTIMEUTC, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.iTOW is None:
        self.iTOW = 0
      if self.tAcc is None:
        self.tAcc = 0
      if self.nano is None:
        self.nano = 0
      if self.year is None:
        self.year = 0
      if self.month is None:
        self.month = 0
      if self.day is None:
        self.day = 0
      if self.hour is None:
        self.hour = 0
      if self.min is None:
        self.min = 0
      if self.sec is None:
        self.sec = 0
      if self.valid is None:
        self.valid = 0
    else:
      self.iTOW = 0
      self.tAcc = 0
      self.nano = 0
      self.year = 0
      self.month = 0
      self.day = 0
      self.hour = 0
      self.min = 0
      self.sec = 0
      self.valid = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IiH6B().pack(_x.iTOW, _x.tAcc, _x.nano, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.iTOW, _x.tAcc, _x.nano, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid,) = _get_struct_2IiH6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IiH6B().pack(_x.iTOW, _x.tAcc, _x.nano, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.iTOW, _x.tAcc, _x.nano, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid,) = _get_struct_2IiH6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IiH6B = None
def _get_struct_2IiH6B():
    global _struct_2IiH6B
    if _struct_2IiH6B is None:
        _struct_2IiH6B = struct.Struct("<2IiH6B")
    return _struct_2IiH6B
