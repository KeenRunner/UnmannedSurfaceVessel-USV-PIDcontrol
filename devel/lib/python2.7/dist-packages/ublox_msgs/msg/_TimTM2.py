# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/TimTM2.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TimTM2(genpy.Message):
  _md5sum = "aae2d427845426ce522cb55dffc19b63"
  _type = "ublox_msgs/TimTM2"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# TIM-TM2 (0x0D, 0x03)
# Time mark data 
#
# Description for details.
# 
# Supported on:
#  - u-blox 8 / u-blox M8 with protocol version 22 (only with Timing Products)
#

uint8 CLASS_ID = 13 
uint8 MESSAGE_ID = 3

uint8 ch                     # Channel (i.e. EXTINT) upon which the pulse was measured

uint8 flags                   # Bitmask [newRisingEdge, time, utc, timeBase, , newFallingEdge, run, mode]
uint8 FLAGS_MODE_RUNNING = 1  # single = 0, running = 1
uint8 FLAGS_RUN = 2		# armed = 0, stopped = 1
uint8 FLAGS_NEWFALLINGEDGE = 4 	# new falling edge detected
uint8 FLAGS_TIMEBASE_GNSS = 8	# 0 = time base is receiver time, 1 = time base is GNSS Time (according to the configuration in CFG-TP5 for tpldx= 0)
uint8 FLAGS_TIMEBASE_UTC = 16	# Time Base is UTC (the variant according to the configuration in CFG-NAV5
uint8 FLAGS_UTC_AVAIL = 32	# 0 = utc not available, 1 = utc available
uint8 FLAGS_TIME_VALID = 64	# 0 = time is not valid, 1 time is valid
uint8 FLAGS_NEWRISINGEDGE = 128	# new rising edge detected

uint16 risingEdgeCount		# rising edge count
uint16 wnR			# week number of last rising edge
uint16 wnF			# week number of last falling edge
uint32 towMsR			# Tow of rising edge 
uint32 towSubMsR		# Millisecond Fraction of Tow of rising edge in nanoseconds
uint32 towMsF			# tow of falling edge
uint32 towSubMsF		# millisecond fraction of tow of falling edge in nanoseconds
uint32 accEst			# Accuracy estimate
"""
  # Pseudo-constants
  CLASS_ID = 13
  MESSAGE_ID = 3
  FLAGS_MODE_RUNNING = 1
  FLAGS_RUN = 2
  FLAGS_NEWFALLINGEDGE = 4
  FLAGS_TIMEBASE_GNSS = 8
  FLAGS_TIMEBASE_UTC = 16
  FLAGS_UTC_AVAIL = 32
  FLAGS_TIME_VALID = 64
  FLAGS_NEWRISINGEDGE = 128

  __slots__ = ['ch','flags','risingEdgeCount','wnR','wnF','towMsR','towSubMsR','towMsF','towSubMsF','accEst']
  _slot_types = ['uint8','uint8','uint16','uint16','uint16','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ch,flags,risingEdgeCount,wnR,wnF,towMsR,towSubMsR,towMsF,towSubMsF,accEst

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TimTM2, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ch is None:
        self.ch = 0
      if self.flags is None:
        self.flags = 0
      if self.risingEdgeCount is None:
        self.risingEdgeCount = 0
      if self.wnR is None:
        self.wnR = 0
      if self.wnF is None:
        self.wnF = 0
      if self.towMsR is None:
        self.towMsR = 0
      if self.towSubMsR is None:
        self.towSubMsR = 0
      if self.towMsF is None:
        self.towMsF = 0
      if self.towSubMsF is None:
        self.towSubMsF = 0
      if self.accEst is None:
        self.accEst = 0
    else:
      self.ch = 0
      self.flags = 0
      self.risingEdgeCount = 0
      self.wnR = 0
      self.wnF = 0
      self.towMsR = 0
      self.towSubMsR = 0
      self.towMsF = 0
      self.towSubMsF = 0
      self.accEst = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3H5I().pack(_x.ch, _x.flags, _x.risingEdgeCount, _x.wnR, _x.wnF, _x.towMsR, _x.towSubMsR, _x.towMsF, _x.towSubMsF, _x.accEst))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.ch, _x.flags, _x.risingEdgeCount, _x.wnR, _x.wnF, _x.towMsR, _x.towSubMsR, _x.towMsF, _x.towSubMsF, _x.accEst,) = _get_struct_2B3H5I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3H5I().pack(_x.ch, _x.flags, _x.risingEdgeCount, _x.wnR, _x.wnF, _x.towMsR, _x.towSubMsR, _x.towMsF, _x.towSubMsF, _x.accEst))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.ch, _x.flags, _x.risingEdgeCount, _x.wnR, _x.wnF, _x.towMsR, _x.towSubMsR, _x.towMsF, _x.towSubMsF, _x.accEst,) = _get_struct_2B3H5I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3H5I = None
def _get_struct_2B3H5I():
    global _struct_2B3H5I
    if _struct_2B3H5I is None:
        _struct_2B3H5I = struct.Struct("<2B3H5I")
    return _struct_2B3H5I
