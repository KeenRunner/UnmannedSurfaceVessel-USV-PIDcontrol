# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/NavSOL.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavSOL(genpy.Message):
  _md5sum = "fbabf6cbcea22aacacf0f8dbb86da71f"
  _type = "ublox_msgs/NavSOL"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# NAV-SOL (0x01 0x06)
# Navigation Solution Information
#
# This message combines Position, velocity and time solution in ECEF, including 
# accuracy figures
# This message has only been retained for backwards compatibility; users are 
# recommended to use the UBX-NAV-PVT message in preference.
#

uint8 CLASS_ID = 1
uint8 MESSAGE_ID = 6

uint32 iTOW             # GPS Millisecond time of week [ms]
int32 fTOW              # Fractional Nanoseconds remainder of rounded
                        # ms above, range -500000 .. 500000 [ns]
int16 week              # GPS week (GPS time)

uint8 gpsFix            # GPSfix Type, range 0..5
uint8 GPS_NO_FIX = 0
uint8 GPS_DEAD_RECKONING_ONLY = 1
uint8 GPS_2D_FIX = 2
uint8 GPS_3D_FIX = 3
uint8 GPS_GPS_DEAD_RECKONING_COMBINED = 4
uint8 GPS_TIME_ONLY_FIX = 5

uint8 flags             # Fix Status Flags
uint8 FLAGS_GPS_FIX_OK = 1      # Fix within limits i.e. within DOP & ACC Masks
uint8 FLAGS_DIFF_SOLN = 2       # DGPS used
uint8 FLAGS_WKNSET = 4          # Week Number valid
uint8 FLAGS_TOWSET = 8          # Time of Week valid

int32 ecefX             # ECEF X coordinate [cm]
int32 ecefY             # ECEF Y coordinate [cm]
int32 ecefZ             # ECEF Z coordinate [cm]
uint32 pAcc             # 3D Position Accuracy Estimate [cm]
int32 ecefVX            # ECEF X velocity [cm/s]
int32 ecefVY            # ECEF Y velocity [cm/s]
int32 ecefVZ            # ECEF Z velocity [cm/s]
uint32 sAcc             # Speed Accuracy Estimate [cm/s]
uint16 pDOP             # Position DOP [1 / 0.01]
uint8 reserved1         # Reserved
uint8 numSV             # Number of SVs used in Nav Solution
uint32 reserved2        # Reserved
"""
  # Pseudo-constants
  CLASS_ID = 1
  MESSAGE_ID = 6
  GPS_NO_FIX = 0
  GPS_DEAD_RECKONING_ONLY = 1
  GPS_2D_FIX = 2
  GPS_3D_FIX = 3
  GPS_GPS_DEAD_RECKONING_COMBINED = 4
  GPS_TIME_ONLY_FIX = 5
  FLAGS_GPS_FIX_OK = 1
  FLAGS_DIFF_SOLN = 2
  FLAGS_WKNSET = 4
  FLAGS_TOWSET = 8

  __slots__ = ['iTOW','fTOW','week','gpsFix','flags','ecefX','ecefY','ecefZ','pAcc','ecefVX','ecefVY','ecefVZ','sAcc','pDOP','reserved1','numSV','reserved2']
  _slot_types = ['uint32','int32','int16','uint8','uint8','int32','int32','int32','uint32','int32','int32','int32','uint32','uint16','uint8','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       iTOW,fTOW,week,gpsFix,flags,ecefX,ecefY,ecefZ,pAcc,ecefVX,ecefVY,ecefVZ,sAcc,pDOP,reserved1,numSV,reserved2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavSOL, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.iTOW is None:
        self.iTOW = 0
      if self.fTOW is None:
        self.fTOW = 0
      if self.week is None:
        self.week = 0
      if self.gpsFix is None:
        self.gpsFix = 0
      if self.flags is None:
        self.flags = 0
      if self.ecefX is None:
        self.ecefX = 0
      if self.ecefY is None:
        self.ecefY = 0
      if self.ecefZ is None:
        self.ecefZ = 0
      if self.pAcc is None:
        self.pAcc = 0
      if self.ecefVX is None:
        self.ecefVX = 0
      if self.ecefVY is None:
        self.ecefVY = 0
      if self.ecefVZ is None:
        self.ecefVZ = 0
      if self.sAcc is None:
        self.sAcc = 0
      if self.pDOP is None:
        self.pDOP = 0
      if self.reserved1 is None:
        self.reserved1 = 0
      if self.numSV is None:
        self.numSV = 0
      if self.reserved2 is None:
        self.reserved2 = 0
    else:
      self.iTOW = 0
      self.fTOW = 0
      self.week = 0
      self.gpsFix = 0
      self.flags = 0
      self.ecefX = 0
      self.ecefY = 0
      self.ecefZ = 0
      self.pAcc = 0
      self.ecefVX = 0
      self.ecefVY = 0
      self.ecefVZ = 0
      self.sAcc = 0
      self.pDOP = 0
      self.reserved1 = 0
      self.numSV = 0
      self.reserved2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Iih2B3iI3iIH2BI().pack(_x.iTOW, _x.fTOW, _x.week, _x.gpsFix, _x.flags, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.ecefVX, _x.ecefVY, _x.ecefVZ, _x.sAcc, _x.pDOP, _x.reserved1, _x.numSV, _x.reserved2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.iTOW, _x.fTOW, _x.week, _x.gpsFix, _x.flags, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.ecefVX, _x.ecefVY, _x.ecefVZ, _x.sAcc, _x.pDOP, _x.reserved1, _x.numSV, _x.reserved2,) = _get_struct_Iih2B3iI3iIH2BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Iih2B3iI3iIH2BI().pack(_x.iTOW, _x.fTOW, _x.week, _x.gpsFix, _x.flags, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.ecefVX, _x.ecefVY, _x.ecefVZ, _x.sAcc, _x.pDOP, _x.reserved1, _x.numSV, _x.reserved2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.iTOW, _x.fTOW, _x.week, _x.gpsFix, _x.flags, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.ecefVX, _x.ecefVY, _x.ecefVZ, _x.sAcc, _x.pDOP, _x.reserved1, _x.numSV, _x.reserved2,) = _get_struct_Iih2B3iI3iIH2BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Iih2B3iI3iIH2BI = None
def _get_struct_Iih2B3iI3iIH2BI():
    global _struct_Iih2B3iI3iIH2BI
    if _struct_Iih2B3iI3iIH2BI is None:
        _struct_Iih2B3iI3iIH2BI = struct.Struct("<Iih2B3iI3iIH2BI")
    return _struct_Iih2B3iI3iIH2BI
