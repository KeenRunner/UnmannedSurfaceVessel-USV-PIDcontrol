# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/RxmSFRBX.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RxmSFRBX(genpy.Message):
  _md5sum = "c76473d828cc8e80de3a2d83cd6b9dff"
  _type = "ublox_msgs/RxmSFRBX"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# RXM-SFRB (0x02 0x13)
# Subframe Buffer
#
# This message reports a complete subframe of broadcast navigation data decoded 
# from a single signal. The number of data words reported in each message
# depends on the nature of the signal. See the section on Broadcast Navigation
# Data for further details.
#

uint8 CLASS_ID = 2
uint8 MESSAGE_ID = 19

uint8 gnssId            # GNSS identifier (see Cfg GNSS for constants)

uint8 svId              # Satellite identifier within corresponding GNSS system
uint8 reserved0         # Reserved
uint8 freqId            # Only used for GLONASS: This is the frequency
                        # slot + 7 (range from 0 to 13)
uint8 numWords          # The number of data words contained in this message (up
                        # to 10, for currently supported signals)
uint8 chn               # The tracking channel number the message was received
                        # on
uint8 version           # Message version, (0x02 for this version)
uint8 reserved1         # Reserved

# Start of repeated block (numWords times)
uint32[] dwrd           # The data words
# End of repeated block"""
  # Pseudo-constants
  CLASS_ID = 2
  MESSAGE_ID = 19

  __slots__ = ['gnssId','svId','reserved0','freqId','numWords','chn','version','reserved1','dwrd']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gnssId,svId,reserved0,freqId,numWords,chn,version,reserved1,dwrd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RxmSFRBX, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gnssId is None:
        self.gnssId = 0
      if self.svId is None:
        self.svId = 0
      if self.reserved0 is None:
        self.reserved0 = 0
      if self.freqId is None:
        self.freqId = 0
      if self.numWords is None:
        self.numWords = 0
      if self.chn is None:
        self.chn = 0
      if self.version is None:
        self.version = 0
      if self.reserved1 is None:
        self.reserved1 = 0
      if self.dwrd is None:
        self.dwrd = []
    else:
      self.gnssId = 0
      self.svId = 0
      self.reserved0 = 0
      self.freqId = 0
      self.numWords = 0
      self.chn = 0
      self.version = 0
      self.reserved1 = 0
      self.dwrd = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.numWords, _x.chn, _x.version, _x.reserved1))
      length = len(self.dwrd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.dwrd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.numWords, _x.chn, _x.version, _x.reserved1,) = _get_struct_8B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dwrd = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.numWords, _x.chn, _x.version, _x.reserved1))
      length = len(self.dwrd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.dwrd.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.numWords, _x.chn, _x.version, _x.reserved1,) = _get_struct_8B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dwrd = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
