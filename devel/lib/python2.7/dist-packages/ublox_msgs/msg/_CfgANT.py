# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/CfgANT.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CfgANT(genpy.Message):
  _md5sum = "6c437e89b3ea397651d3a01434d681c7"
  _type = "ublox_msgs/CfgANT"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# CFG-ANT (0x06 0x13)
# Antenna Control Settings
#

uint8 CLASS_ID = 6
uint8 MESSAGE_ID = 19

uint16 flags            # Antenna Flag Mask
uint16 FLAGS_SVCS = 1         # Enable Antenna Supply Voltage Control Signal
uint16 FLAGS_SCD = 2          # Enable Short Circuit Detection
uint16 FLAGS_OCD = 4          # Enable Open Circuit Detection
uint16 FLAGS_PDWN_ON_SCD = 8  # Power Down Antenna supply if Short Circuit is 
                              # detected. (only in combination with Bit 1)
uint16 FLAGS_RECOVERY = 16    # Enable automatic recovery from short state

uint16 pins             # Antenna Pin Configuration
uint16 PIN_SWITCH_MASK = 31    # PIO-Pin used for switching antenna supply 
                               # (internal to TIM-LP/TIM-LF)
uint16 PIN_SCD_MASK = 992      # PIO-Pin used for detecting a short in the 
                               # antenna supply
uint16 PIN_OCD_MASK = 31744    # PIO-Pin used for detecting open/not connected 
                               # antenna
uint16 PIN_RECONFIG = 32678    # if set to one, and this command is sent to the 
                               # receiver, the receiver will reconfigure the 
                               # pins as specified.
"""
  # Pseudo-constants
  CLASS_ID = 6
  MESSAGE_ID = 19
  FLAGS_SVCS = 1
  FLAGS_SCD = 2
  FLAGS_OCD = 4
  FLAGS_PDWN_ON_SCD = 8
  FLAGS_RECOVERY = 16
  PIN_SWITCH_MASK = 31
  PIN_SCD_MASK = 992
  PIN_OCD_MASK = 31744
  PIN_RECONFIG = 32678

  __slots__ = ['flags','pins']
  _slot_types = ['uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flags,pins

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CfgANT, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.flags is None:
        self.flags = 0
      if self.pins is None:
        self.pins = 0
    else:
      self.flags = 0
      self.pins = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H().pack(_x.flags, _x.pins))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.flags, _x.pins,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H().pack(_x.flags, _x.pins))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.flags, _x.pins,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
