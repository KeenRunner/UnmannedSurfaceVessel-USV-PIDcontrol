# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/EsfMEAS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EsfMEAS(genpy.Message):
  _md5sum = "2ee2c25c5689cb0a12cc22f118ece178"
  _type = "ublox_msgs/EsfMEAS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ESF-MEAS (0x10 0x02)
# External Sensor Fusion Measurements
# 
# Possible data types for the data field are described in the ESF Measurement 
# Data section
#

uint8 CLASS_ID = 16
uint8 MESSAGE_ID = 2

uint32 timeTag               # Time tag of measurement generated by external 
                             # sensor

uint16 flags                 # Flags. Set all unused bits to zero:
uint16 FLAGS_TIME_MARK_SENT_MASK = 3   # Time mark signal was supplied just 
                                       # prior to sending this message: 0 =
uint16 TIME_MARK_NONE = 0
uint16 TIME_MARK_EXT0 = 1
uint16 TIME_MARK_EXT = 2
uint16 FLAGS_TIME_MARK_EDGE = 4        # Trigger on rising (0) or falling 
                                       # (1) edge of time mark signal
uint16 FLAGS_CALIB_T_TAG_VALID = 8     # Calibration time tag available. 
                                       # Always set to zero.

uint16 id                              # Identification number of data provider

# Start of repeated block (N times)
uint32[] data                # data, see mask below
uint32 DATA_FIELD_MASK = 16777215     # data
uint32 DATA_TYPE_MASK = 1056964608    # type of data (1..63)
uint32 DATA_TYPE_SHIFT = 24
uint32 DATA_TYPE_NONE = 0                     # data field contains no data
uint32 DATA_TYPE_Z_AXIS_GYRO = 5              # z-axis gyroscope angular rate 
                                              # [deg/s *2^-12 signed]
uint32 DATA_TYPE_WHEEL_TICKS_FRONT_LEFT = 6   # front-left wheel ticks 
                                              # Bits 0-22: unsigned tick value. 
                                              # Bit 23: direction indicator 
                                              # (0=forward, 1=backward)
uint32 DATA_TYPE_WHEEL_TICKS_FRONT_RIGHT = 7  # front-right wheel ticks 
                                              # Bits 0-22: unsigned tick value. 
                                              # Bit 23: direction indicator 
                                              # (0=forward, 1=backward)
uint32 DATA_TYPE_WHEEL_TICKS_REAR_LEFT = 8    # rear-left wheel ticks 
                                              # Bits 0-22: unsigned tick value. 
                                              # Bit 23: direction indicator 
                                              # (0=forward, 1=backward)
uint32 DATA_TYPE_WHEEL_TICKS_REAR_RIGHT = 9   # rear-right wheel ticks 
                                              # Bits 0-22: unsigned tick value. 
                                              # Bit 23: direction indicator 
                                              # (0=forward, 1=backward)
uint32 DATA_TYPE_SINGLE_TICK = 10             # single tick (speed tick) 
                                              # Bits 0-22: unsigned tick value. 
                                              # Bit 23: direction indicator 
                                              # (0=forward, 1=backward)
uint32 DATA_TYPE_SPEED = 11                   # speed m/s * 1e-3 signed
uint32 DATA_TYPE_GYRO_TEMPERATURE = 12        # gyroscope temperature 
                                              # [deg Celsius * 1e-2 signed]
uint32 DATA_TYPE_GYRO_ANG_RATE_Y = 13         # y-axis gyroscope angular rate 
                                              # [deg/s *2^-12 signed]
uint32 DATA_TYPE_GYRO_ANG_RATE_X = 14         # x-axis gyroscope angular rate 
                                              # [deg/s *2^-12 signed]
uint32 DATA_TYPE_ACCELEROMETER_X = 16         # x-axis accelerometer specific 
                                              # [force m/s^2 *2^-10 signed]
uint32 DATA_TYPE_ACCELEROMETER_Y = 17         # y-axis accelerometer specific 
                                              # [force m/s^2 *2^-10 signed]
uint32 DATA_TYPE_ACCELEROMETER_Z = 18         # z-axis accelerometer specific 
                                              # [force m/s^2 *2^-10 signed]



# End of repeated block

# Start of optional block (size is either 0 or 1)
uint32[] calibTtag           # Receiver local time calibrated.
                             # This field must not be supplied when
                             # calibTtagValid is set to 0 [ms]
# End of optional block"""
  # Pseudo-constants
  CLASS_ID = 16
  MESSAGE_ID = 2
  FLAGS_TIME_MARK_SENT_MASK = 3
  TIME_MARK_NONE = 0
  TIME_MARK_EXT0 = 1
  TIME_MARK_EXT = 2
  FLAGS_TIME_MARK_EDGE = 4
  FLAGS_CALIB_T_TAG_VALID = 8
  DATA_FIELD_MASK = 16777215
  DATA_TYPE_MASK = 1056964608
  DATA_TYPE_SHIFT = 24
  DATA_TYPE_NONE = 0
  DATA_TYPE_Z_AXIS_GYRO = 5
  DATA_TYPE_WHEEL_TICKS_FRONT_LEFT = 6
  DATA_TYPE_WHEEL_TICKS_FRONT_RIGHT = 7
  DATA_TYPE_WHEEL_TICKS_REAR_LEFT = 8
  DATA_TYPE_WHEEL_TICKS_REAR_RIGHT = 9
  DATA_TYPE_SINGLE_TICK = 10
  DATA_TYPE_SPEED = 11
  DATA_TYPE_GYRO_TEMPERATURE = 12
  DATA_TYPE_GYRO_ANG_RATE_Y = 13
  DATA_TYPE_GYRO_ANG_RATE_X = 14
  DATA_TYPE_ACCELEROMETER_X = 16
  DATA_TYPE_ACCELEROMETER_Y = 17
  DATA_TYPE_ACCELEROMETER_Z = 18

  __slots__ = ['timeTag','flags','id','data','calibTtag']
  _slot_types = ['uint32','uint16','uint16','uint32[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeTag,flags,id,data,calibTtag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsfMEAS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timeTag is None:
        self.timeTag = 0
      if self.flags is None:
        self.flags = 0
      if self.id is None:
        self.id = 0
      if self.data is None:
        self.data = []
      if self.calibTtag is None:
        self.calibTtag = []
    else:
      self.timeTag = 0
      self.flags = 0
      self.id = 0
      self.data = []
      self.calibTtag = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2H().pack(_x.timeTag, _x.flags, _x.id))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.data))
      length = len(self.calibTtag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.calibTtag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timeTag, _x.flags, _x.id,) = _get_struct_I2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.calibTtag = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2H().pack(_x.timeTag, _x.flags, _x.id))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.data.tostring())
      length = len(self.calibTtag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.calibTtag.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timeTag, _x.flags, _x.id,) = _get_struct_I2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.calibTtag = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2H = None
def _get_struct_I2H():
    global _struct_I2H
    if _struct_I2H is None:
        _struct_I2H = struct.Struct("<I2H")
    return _struct_I2H
