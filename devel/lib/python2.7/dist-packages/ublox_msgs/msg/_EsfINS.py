# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/EsfINS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EsfINS(genpy.Message):
  _md5sum = "975d05e9503737524d7e47a42cb9fff1"
  _type = "ublox_msgs/EsfINS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ESF-INS (0x10 0x15)
# Vehicle dynamics information
# 
# This message outputs information about vehicle dynamics computed by the 
# Inertial Navigation System (INS) during ESF-based navigation.
# For ADR products, the output dynamics information (angular rates and 
# accelerations) is expressed with respect to the vehicle-frame.
# For UDR products, the output dynamics information (angular rates and 
# accelerations) is expressed with respect to the body-frame.
#

uint8 CLASS_ID = 16
uint8 MESSAGE_ID = 21

uint32 bitfield0      # Bitfield (see graphic below)
uint32 BITFIELD0_VERSION = 255            # Message version (1 for this version).
uint32 BITFIELD0_X_ANG_RATE_VALID = 256   # Compensated x-axis angular rate data 
                                          # validity flag
uint32 BITFIELD0_Y_ANG_RATE_VALID = 512   # Compensated y-axis angular rate data 
                                          # validity flag
uint32 BITFIELD0_Z_ANG_RATE_VALID = 1024  # Compensated z-axis angular rate data 
                                          # validity flag
uint32 BITFIELD0_X_ACCEL_VALID = 2048     # Compensated x-axis acceleration data 
                                          # validity flag
uint32 BITFIELD0_Y_ACCEL_VALID = 4096     # Compensated y-axis acceleration data 
                                          # validity flag
uint32 BITFIELD0_Z_ACCEL_VALID = 8192     # Compensated z-axis acceleration data 
                                          # validity flag

uint8[4] reserved1    # Reserved

uint32 iTOW           # GPS time of week of the navigation epoch [ms]
int32 xAngRate        # Compensated x-axis angular rate [deg/s / 1e-3]
int32 yAngRate        # Compensated y-axis angular rate [deg/s / 1e-3]
int32 zAngRate        # Compensated z-axis angular rate [deg/s / 1e-3]
int32 xAccel          # Compensated x-axis acceleration (gravity-free) [mg]
int32 yAccel          # Compensated y-axis acceleration (gravity-free) [mg]
int32 zAccel          # Compensated z-axis acceleration (gravity-free) [mg]"""
  # Pseudo-constants
  CLASS_ID = 16
  MESSAGE_ID = 21
  BITFIELD0_VERSION = 255
  BITFIELD0_X_ANG_RATE_VALID = 256
  BITFIELD0_Y_ANG_RATE_VALID = 512
  BITFIELD0_Z_ANG_RATE_VALID = 1024
  BITFIELD0_X_ACCEL_VALID = 2048
  BITFIELD0_Y_ACCEL_VALID = 4096
  BITFIELD0_Z_ACCEL_VALID = 8192

  __slots__ = ['bitfield0','reserved1','iTOW','xAngRate','yAngRate','zAngRate','xAccel','yAccel','zAccel']
  _slot_types = ['uint32','uint8[4]','uint32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bitfield0,reserved1,iTOW,xAngRate,yAngRate,zAngRate,xAccel,yAccel,zAccel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsfINS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bitfield0 is None:
        self.bitfield0 = 0
      if self.reserved1 is None:
        self.reserved1 = b'\0'*4
      if self.iTOW is None:
        self.iTOW = 0
      if self.xAngRate is None:
        self.xAngRate = 0
      if self.yAngRate is None:
        self.yAngRate = 0
      if self.zAngRate is None:
        self.zAngRate = 0
      if self.xAccel is None:
        self.xAccel = 0
      if self.yAccel is None:
        self.yAccel = 0
      if self.zAccel is None:
        self.zAccel = 0
    else:
      self.bitfield0 = 0
      self.reserved1 = b'\0'*4
      self.iTOW = 0
      self.xAngRate = 0
      self.yAngRate = 0
      self.zAngRate = 0
      self.xAccel = 0
      self.yAccel = 0
      self.zAccel = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.bitfield0
      buff.write(_get_struct_I().pack(_x))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self
      buff.write(_get_struct_I6i().pack(_x.iTOW, _x.xAngRate, _x.yAngRate, _x.zAngRate, _x.xAccel, _x.yAccel, _x.zAccel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.bitfield0,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      self.reserved1 = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.iTOW, _x.xAngRate, _x.yAngRate, _x.zAngRate, _x.xAccel, _x.yAccel, _x.zAccel,) = _get_struct_I6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.bitfield0
      buff.write(_get_struct_I().pack(_x))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self
      buff.write(_get_struct_I6i().pack(_x.iTOW, _x.xAngRate, _x.yAngRate, _x.zAngRate, _x.xAccel, _x.yAccel, _x.zAccel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.bitfield0,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      self.reserved1 = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.iTOW, _x.xAngRate, _x.yAngRate, _x.zAngRate, _x.xAccel, _x.yAccel, _x.zAccel,) = _get_struct_I6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
_struct_I6i = None
def _get_struct_I6i():
    global _struct_I6i
    if _struct_I6i is None:
        _struct_I6i = struct.Struct("<I6i")
    return _struct_I6i
