# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/CfgNAV5.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CfgNAV5(genpy.Message):
  _md5sum = "30ca0eca946e4bd96bf9f8a145f7b72c"
  _type = "ublox_msgs/CfgNAV5"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# CFG-NAV5 (0x06 0x24)
# Navigation Engine Settings

uint8 CLASS_ID = 6
uint8 MESSAGE_ID = 36

uint16 mask             # Parameters Bitmask. Only the masked
                        # parameters will be applied.
uint16 MASK_DYN = 1                 # Apply dynamic model settings
uint16 MASK_MIN_EL = 2              # Apply minimum elevation settings
uint16 MASK_FIX_MODE = 4            # Apply fix mode settings
uint16 MASK_DR_LIM = 8              # Apply DR limit settings
uint16 MASK_POS_MASK = 16           # Apply position mask settings
uint16 MASK_TIME_MASK = 32          # Apply time mask settings
uint16 MASK_STATIC_HOLD_MASK = 64   # Apply static hold settings
uint16 MASK_DGPS_MASK = 128         # Apply DGPS settings, firmware >= 7 only
uint16 MASK_CNO = 256               # Apply CNO threshold settings
uint16 MASK_UTC = 1024              # Apply UTC settings, protocol >= 16 only

uint8 dynModel          # Dynamic Platform model:
uint8 DYN_MODEL_PORTABLE = 0        # Portable
uint8 DYN_MODEL_STATIONARY = 2      # Stationary
uint8 DYN_MODEL_PEDESTRIAN = 3      # Pedestrian
uint8 DYN_MODEL_AUTOMOTIVE = 4      # Automotive
uint8 DYN_MODEL_SEA = 5             # Sea
uint8 DYN_MODEL_AIRBORNE_1G = 6     # Airborne with <1g Acceleration
uint8 DYN_MODEL_AIRBORNE_2G = 7     # Airborne with <2g Acceleration
uint8 DYN_MODEL_AIRBORNE_4G = 8     # Airborne with <4g Acceleration
uint8 DYN_MODEL_WRIST_WATCH = 9     # Wrist watch, protocol >= 18

uint8 fixMode           # Position Fixing Mode.
uint8 FIX_MODE_2D_ONLY = 1          # 2D only
uint8 FIX_MODE_3D_ONLY = 2          # 3D only
uint8 FIX_MODE_AUTO = 3             # Auto 2D/3D

int32 fixedAlt          # Fixed altitude (mean sea level) for 2D fix mode. 
                        # [m / 0.01]
uint32 fixedAltVar      # Fixed altitude variance for 2D mode. [m^2 / 0.0001]
int8 minElev            # Minimum Elevation for a GNSS satellite to be used in 
                        # NAV [deg]
uint8 drLimit           # Maximum time to perform dead reckoning [s]
                        # (linear extrapolation) in case of GPS signal loss
uint16 pDop             # Position DOP Mask to use [1 / 0.1]
uint16 tDop             # Time DOP Mask to use [1 / 0.1]
uint16 pAcc             # Position Accuracy Mask [m]
uint16 tAcc             # Time Accuracy Mask [m]
uint8 staticHoldThresh  # Static hold threshold [cm/s]
uint8 dgnssTimeOut      # DGNSS timeout, firmware 7 and newer only [s]

uint8 cnoThreshNumSvs   # Number of satellites required to have C/N0 above 
                        # cnoThresh for a fix to be attempted
uint8 cnoThresh         # C/N0 threshold for deciding whether to attempt a fix
                        # [dBHz]
uint8[2] reserved1      # Reserved

uint16 staticHoldMaxDist  # Static hold distance threshold (before quitting 
                          # static hold) [m]
uint8 utcStandard       # UTC standard to be used:
uint8 UTC_STANDARD_AUTOMATIC = 0 # receiver selects based on GNSS configuration
uint8 UTC_STANDARD_GPS = 3       # UTC as operated by the U.S. Naval Observatory 
                                 # (USNO); derived from GPS time
uint8 UTC_STANDARD_GLONASS = 6   # UTC as operated by the former Soviet Union;
                                 # derived from GLONASS time
uint8 UTC_STANDARD_BEIDOU = 7    # UTC as operated by the National Time Service
                                 # Center, China; derived from BeiDou time
uint8[5] reserved2      # Reserved"""
  # Pseudo-constants
  CLASS_ID = 6
  MESSAGE_ID = 36
  MASK_DYN = 1
  MASK_MIN_EL = 2
  MASK_FIX_MODE = 4
  MASK_DR_LIM = 8
  MASK_POS_MASK = 16
  MASK_TIME_MASK = 32
  MASK_STATIC_HOLD_MASK = 64
  MASK_DGPS_MASK = 128
  MASK_CNO = 256
  MASK_UTC = 1024
  DYN_MODEL_PORTABLE = 0
  DYN_MODEL_STATIONARY = 2
  DYN_MODEL_PEDESTRIAN = 3
  DYN_MODEL_AUTOMOTIVE = 4
  DYN_MODEL_SEA = 5
  DYN_MODEL_AIRBORNE_1G = 6
  DYN_MODEL_AIRBORNE_2G = 7
  DYN_MODEL_AIRBORNE_4G = 8
  DYN_MODEL_WRIST_WATCH = 9
  FIX_MODE_2D_ONLY = 1
  FIX_MODE_3D_ONLY = 2
  FIX_MODE_AUTO = 3
  UTC_STANDARD_AUTOMATIC = 0
  UTC_STANDARD_GPS = 3
  UTC_STANDARD_GLONASS = 6
  UTC_STANDARD_BEIDOU = 7

  __slots__ = ['mask','dynModel','fixMode','fixedAlt','fixedAltVar','minElev','drLimit','pDop','tDop','pAcc','tAcc','staticHoldThresh','dgnssTimeOut','cnoThreshNumSvs','cnoThresh','reserved1','staticHoldMaxDist','utcStandard','reserved2']
  _slot_types = ['uint16','uint8','uint8','int32','uint32','int8','uint8','uint16','uint16','uint16','uint16','uint8','uint8','uint8','uint8','uint8[2]','uint16','uint8','uint8[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mask,dynModel,fixMode,fixedAlt,fixedAltVar,minElev,drLimit,pDop,tDop,pAcc,tAcc,staticHoldThresh,dgnssTimeOut,cnoThreshNumSvs,cnoThresh,reserved1,staticHoldMaxDist,utcStandard,reserved2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CfgNAV5, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mask is None:
        self.mask = 0
      if self.dynModel is None:
        self.dynModel = 0
      if self.fixMode is None:
        self.fixMode = 0
      if self.fixedAlt is None:
        self.fixedAlt = 0
      if self.fixedAltVar is None:
        self.fixedAltVar = 0
      if self.minElev is None:
        self.minElev = 0
      if self.drLimit is None:
        self.drLimit = 0
      if self.pDop is None:
        self.pDop = 0
      if self.tDop is None:
        self.tDop = 0
      if self.pAcc is None:
        self.pAcc = 0
      if self.tAcc is None:
        self.tAcc = 0
      if self.staticHoldThresh is None:
        self.staticHoldThresh = 0
      if self.dgnssTimeOut is None:
        self.dgnssTimeOut = 0
      if self.cnoThreshNumSvs is None:
        self.cnoThreshNumSvs = 0
      if self.cnoThresh is None:
        self.cnoThresh = 0
      if self.reserved1 is None:
        self.reserved1 = b'\0'*2
      if self.staticHoldMaxDist is None:
        self.staticHoldMaxDist = 0
      if self.utcStandard is None:
        self.utcStandard = 0
      if self.reserved2 is None:
        self.reserved2 = b'\0'*5
    else:
      self.mask = 0
      self.dynModel = 0
      self.fixMode = 0
      self.fixedAlt = 0
      self.fixedAltVar = 0
      self.minElev = 0
      self.drLimit = 0
      self.pDop = 0
      self.tDop = 0
      self.pAcc = 0
      self.tAcc = 0
      self.staticHoldThresh = 0
      self.dgnssTimeOut = 0
      self.cnoThreshNumSvs = 0
      self.cnoThresh = 0
      self.reserved1 = b'\0'*2
      self.staticHoldMaxDist = 0
      self.utcStandard = 0
      self.reserved2 = b'\0'*5

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2BiIbB4H4B().pack(_x.mask, _x.dynModel, _x.fixMode, _x.fixedAlt, _x.fixedAltVar, _x.minElev, _x.drLimit, _x.pDop, _x.tDop, _x.pAcc, _x.tAcc, _x.staticHoldThresh, _x.dgnssTimeOut, _x.cnoThreshNumSvs, _x.cnoThresh))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_HB().pack(_x.staticHoldMaxDist, _x.utcStandard))
      _x = self.reserved2
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_5B().pack(*_x))
      else:
        buff.write(_get_struct_5s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.mask, _x.dynModel, _x.fixMode, _x.fixedAlt, _x.fixedAltVar, _x.minElev, _x.drLimit, _x.pDop, _x.tDop, _x.pAcc, _x.tAcc, _x.staticHoldThresh, _x.dgnssTimeOut, _x.cnoThreshNumSvs, _x.cnoThresh,) = _get_struct_H2BiIbB4H4B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved1 = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.staticHoldMaxDist, _x.utcStandard,) = _get_struct_HB().unpack(str[start:end])
      start = end
      end += 5
      self.reserved2 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2BiIbB4H4B().pack(_x.mask, _x.dynModel, _x.fixMode, _x.fixedAlt, _x.fixedAltVar, _x.minElev, _x.drLimit, _x.pDop, _x.tDop, _x.pAcc, _x.tAcc, _x.staticHoldThresh, _x.dgnssTimeOut, _x.cnoThreshNumSvs, _x.cnoThresh))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_HB().pack(_x.staticHoldMaxDist, _x.utcStandard))
      _x = self.reserved2
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_5B().pack(*_x))
      else:
        buff.write(_get_struct_5s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.mask, _x.dynModel, _x.fixMode, _x.fixedAlt, _x.fixedAltVar, _x.minElev, _x.drLimit, _x.pDop, _x.tDop, _x.pAcc, _x.tAcc, _x.staticHoldThresh, _x.dgnssTimeOut, _x.cnoThreshNumSvs, _x.cnoThresh,) = _get_struct_H2BiIbB4H4B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved1 = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.staticHoldMaxDist, _x.utcStandard,) = _get_struct_HB().unpack(str[start:end])
      start = end
      end += 5
      self.reserved2 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_5s = None
def _get_struct_5s():
    global _struct_5s
    if _struct_5s is None:
        _struct_5s = struct.Struct("<5s")
    return _struct_5s
_struct_H2BiIbB4H4B = None
def _get_struct_H2BiIbB4H4B():
    global _struct_H2BiIbB4H4B
    if _struct_H2BiIbB4H4B is None:
        _struct_H2BiIbB4H4B = struct.Struct("<H2BiIbB4H4B")
    return _struct_H2BiIbB4H4B
_struct_HB = None
def _get_struct_HB():
    global _struct_HB
    if _struct_HB is None:
        _struct_HB = struct.Struct("<HB")
    return _struct_HB
