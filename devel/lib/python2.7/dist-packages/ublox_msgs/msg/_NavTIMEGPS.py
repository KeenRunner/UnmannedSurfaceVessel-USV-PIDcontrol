# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/NavTIMEGPS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavTIMEGPS(genpy.Message):
  _md5sum = "94098180ac3e5e36144a6337c1462f46"
  _type = "ublox_msgs/NavTIMEGPS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# NAV-TIMEGPS (0x01 0x20)
# GPS Time Solution
#

uint8 CLASS_ID = 1
uint8 MESSAGE_ID = 32

uint32 iTOW             # GPS Millisecond time of week [ms]
int32 fTOW              # Fractional Nanoseconds remainder of rounded
                        # ms above, range -500000 .. 500000 [ns]
int16 week              # GPS week (GPS time)

int8 leapS              # Leap Seconds (GPS-UTC) [s]

uint8 valid             # Validity Flags
uint8 VALID_TOW = 1        # Valid Time of Week
uint8 VALID_WEEK = 2       # Valid Week Number
uint8 VALID_LEAP_S = 4     # Valid Leap Seconds

uint32 tAcc             # Time Accuracy Estimate [ns]
"""
  # Pseudo-constants
  CLASS_ID = 1
  MESSAGE_ID = 32
  VALID_TOW = 1
  VALID_WEEK = 2
  VALID_LEAP_S = 4

  __slots__ = ['iTOW','fTOW','week','leapS','valid','tAcc']
  _slot_types = ['uint32','int32','int16','int8','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       iTOW,fTOW,week,leapS,valid,tAcc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavTIMEGPS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.iTOW is None:
        self.iTOW = 0
      if self.fTOW is None:
        self.fTOW = 0
      if self.week is None:
        self.week = 0
      if self.leapS is None:
        self.leapS = 0
      if self.valid is None:
        self.valid = 0
      if self.tAcc is None:
        self.tAcc = 0
    else:
      self.iTOW = 0
      self.fTOW = 0
      self.week = 0
      self.leapS = 0
      self.valid = 0
      self.tAcc = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IihbBI().pack(_x.iTOW, _x.fTOW, _x.week, _x.leapS, _x.valid, _x.tAcc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.iTOW, _x.fTOW, _x.week, _x.leapS, _x.valid, _x.tAcc,) = _get_struct_IihbBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IihbBI().pack(_x.iTOW, _x.fTOW, _x.week, _x.leapS, _x.valid, _x.tAcc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.iTOW, _x.fTOW, _x.week, _x.leapS, _x.valid, _x.tAcc,) = _get_struct_IihbBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IihbBI = None
def _get_struct_IihbBI():
    global _struct_IihbBI
    if _struct_IihbBI is None:
        _struct_IihbBI = struct.Struct("<IihbBI")
    return _struct_IihbBI
