# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/CfgRST.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CfgRST(genpy.Message):
  _md5sum = "a1d02f583dd30373e526af3ea4137f5d"
  _type = "ublox_msgs/CfgRST"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# CFG-RST (0x06 0x04)
# Reset Receiver / Clear Backup Data Structures
#
# Don't expect this message to be acknowledged by the receiver.
#  - Newer FW version won't acknowledge this message at all.
#  - Older FW version will acknowledge this message but the acknowledge may not
#    be sent completely before the receiver is reset.
#

uint8 CLASS_ID = 6
uint8 MESSAGE_ID = 4 

uint16 navBbrMask # BBR Sections to clear. 
# The following Special Sets apply:
uint16 NAV_BBR_HOT_START = 0       # Hot start the device
uint16 NAV_BBR_WARM_START = 1      # Warm start the device
uint16 NAV_BBR_COLD_START = 65535  # Cold start the device
uint16 NAV_BBR_EPH = 1       # Ephemeris
uint16 NAV_BBR_ALM = 2       # Almanac
uint16 NAV_BBR_HEALTH = 4    # Health
uint16 NAV_BBR_KLOB = 8      # Klobuchar parameters
uint16 NAV_BBR_POS = 16      # Position
uint16 NAV_BBR_CLKD = 32     # Clock Drift
uint16 NAV_BBR_OSC = 64      # Oscillator Parameter
uint16 NAV_BBR_UTC = 128     # UTC Correction + GPS Leap Seconds Parameters
uint16 NAV_BBR_RTC = 256     # RTC
uint16 NAV_BBR_AOP = 32768   # Autonomous Orbit Parameters

uint8 resetMode              # Reset Type:
uint8 RESET_MODE_HW_IMMEDIATE = 0       # Hardware reset (Watchdog) immediately
uint8 RESET_MODE_SW = 1                 # Controlled Software reset
uint8 RESET_MODE_GNSS = 2               # Controlled Software reset (GNSS only)
uint8 RESET_MODE_HW_AFTER_SHUTDOWN = 4  # Hardware reset (Watchdog) after 
                                        # shutdown
uint8 RESET_MODE_GNSS_STOP = 8          # Controlled GNSS stop
uint8 RESET_MODE_GNSS_START = 9         # Controlled GNSS start

uint8 reserved1     # Reserved"""
  # Pseudo-constants
  CLASS_ID = 6
  MESSAGE_ID = 4
  NAV_BBR_HOT_START = 0
  NAV_BBR_WARM_START = 1
  NAV_BBR_COLD_START = 65535
  NAV_BBR_EPH = 1
  NAV_BBR_ALM = 2
  NAV_BBR_HEALTH = 4
  NAV_BBR_KLOB = 8
  NAV_BBR_POS = 16
  NAV_BBR_CLKD = 32
  NAV_BBR_OSC = 64
  NAV_BBR_UTC = 128
  NAV_BBR_RTC = 256
  NAV_BBR_AOP = 32768
  RESET_MODE_HW_IMMEDIATE = 0
  RESET_MODE_SW = 1
  RESET_MODE_GNSS = 2
  RESET_MODE_HW_AFTER_SHUTDOWN = 4
  RESET_MODE_GNSS_STOP = 8
  RESET_MODE_GNSS_START = 9

  __slots__ = ['navBbrMask','resetMode','reserved1']
  _slot_types = ['uint16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       navBbrMask,resetMode,reserved1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CfgRST, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.navBbrMask is None:
        self.navBbrMask = 0
      if self.resetMode is None:
        self.resetMode = 0
      if self.reserved1 is None:
        self.reserved1 = 0
    else:
      self.navBbrMask = 0
      self.resetMode = 0
      self.reserved1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2B().pack(_x.navBbrMask, _x.resetMode, _x.reserved1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.navBbrMask, _x.resetMode, _x.reserved1,) = _get_struct_H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2B().pack(_x.navBbrMask, _x.resetMode, _x.reserved1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.navBbrMask, _x.resetMode, _x.reserved1,) = _get_struct_H2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2B = None
def _get_struct_H2B():
    global _struct_H2B
    if _struct_H2B is None:
        _struct_H2B = struct.Struct("<H2B")
    return _struct_H2B
