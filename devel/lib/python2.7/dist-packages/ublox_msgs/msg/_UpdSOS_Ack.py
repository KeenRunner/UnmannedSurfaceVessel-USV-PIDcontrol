# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/UpdSOS_Ack.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class UpdSOS_Ack(genpy.Message):
  _md5sum = "028d9bc0701daf71dcd1ad8cef68594c"
  _type = "ublox_msgs/UpdSOS_Ack"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# UPD-SOS (0x09 0x14)
#
# Backup File Creation Acknowledge / System Restored from Backup
# 
# Firmware Supported on:
# u-blox 8 / u-blox M8 from protocol version 15 up to version 23.01
#

uint8 CLASS_ID = 9
uint8 MESSAGE_ID = 20

uint8 cmd                   # Command
uint8 CMD_BACKUP_CREATE_ACK = 2   # Backup File Creation Acknowledge
                                  # The message is sent from the device as 
                                  # confirmation of creation of a backup file 
                                  # in flash. The host can safely shut down the 
                                  # device after received this message.
uint8 CMD_SYSTEM_RESTORED = 3     # System Restored from Backup
                                  # The message is sent from the device to 
                                  # notify the host the BBR has been restored 
                                  # from a backup file in flash. The host 
                                  # should clear the backup file after 
                                  # receiving this message. If the UBX-UPD-SOS 
                                  # message is polled, this message will be 
                                  # present.

uint8[3] reserved0          # Reserved

uint8 response                                  # Response:
uint8 BACKUP_CREATE_NACK = 0                      # Not acknowledged
uint8 BACKUP_CREATE_ACK = 1                       # Acknowledged
uint8 SYSTEM_RESTORED_RESPONSE_UNKNOWN = 0        # Unknown
uint8 SYSTEM_RESTORED_RESPONSE_FAILED = 1         # Failed restoring from backup 
                                                  # file
uint8 SYSTEM_RESTORED_RESPONSE_RESTORED = 2       # Restored from backup file
uint8 SYSTEM_RESTORED_RESPONSE_NOT_RESTORED = 3   # Not restored (no backup)

uint8[3] reserved1          # Reserved"""
  # Pseudo-constants
  CLASS_ID = 9
  MESSAGE_ID = 20
  CMD_BACKUP_CREATE_ACK = 2
  CMD_SYSTEM_RESTORED = 3
  BACKUP_CREATE_NACK = 0
  BACKUP_CREATE_ACK = 1
  SYSTEM_RESTORED_RESPONSE_UNKNOWN = 0
  SYSTEM_RESTORED_RESPONSE_FAILED = 1
  SYSTEM_RESTORED_RESPONSE_RESTORED = 2
  SYSTEM_RESTORED_RESPONSE_NOT_RESTORED = 3

  __slots__ = ['cmd','reserved0','response','reserved1']
  _slot_types = ['uint8','uint8[3]','uint8','uint8[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd,reserved0,response,reserved1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UpdSOS_Ack, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd is None:
        self.cmd = 0
      if self.reserved0 is None:
        self.reserved0 = b'\0'*3
      if self.response is None:
        self.response = 0
      if self.reserved1 is None:
        self.reserved1 = b'\0'*3
    else:
      self.cmd = 0
      self.reserved0 = b'\0'*3
      self.response = 0
      self.reserved1 = b'\0'*3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cmd
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
      _x = self.response
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.cmd,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved0 = str[start:end]
      start = end
      end += 1
      (self.response,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved1 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cmd
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
      _x = self.response
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.cmd,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved0 = str[start:end]
      start = end
      end += 1
      (self.response,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved1 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3s = None
def _get_struct_3s():
    global _struct_3s
    if _struct_3s is None:
        _struct_3s = struct.Struct("<3s")
    return _struct_3s
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
