# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/RxmRAWX.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ublox_msgs.msg

class RxmRAWX(genpy.Message):
  _md5sum = "a2df4b27b6a2a1565e42f5669dbb11b5"
  _type = "ublox_msgs/RxmRAWX"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# RXM-RAWX (0x02 0x15)
# Multi-GNSS Raw Measurement Data
#
# This message contains the information needed to be able to generate a RINEX 3
# multi-GNSS observation file.
# This message contains pseudorange, Doppler, carrier phase, phase lock and
# signal quality information for GNSS satellites once signals have been
# synchronized. This message supports all active GNSS.
# 

uint8 CLASS_ID = 2
uint8 MESSAGE_ID = 21

float64 rcvTOW          # Measurement time of week in receiver local time [s]
                        # approximately aligned to the GPS time system. The
                        # receiver local time of week number and leap second
                        # information can be used to translate the time to other 
                        # time systems. More information about the difference in
                        # time systems can be found in RINEX 3 documentation. 
                        # For a receiver operating in GLONASS only mode, UTC
                        # time can be determined by subtracting the leapS field 
                        # from GPS time regardless of whether the GPS leap
                        # seconds are valid. 
uint16 week             # GPS week number in receiver local time. [weeks]
int8 leapS              # GPS leap seconds (GPS-UTC). [s]
                        # This field represents the receiver's best knowledge of
                        # the leap seconds offset. A flag is given in the
                        # recStat bitfield to indicate if the leap seconds 
                        # are known.
uint8 numMeas           # # of measurements to follow
uint8 recStat           # Receiver tracking status bitfield
uint8 REC_STAT_LEAP_SEC = 1   # Leap seconds have been determined
uint8 REC_STAT_CLK_RESET = 2  # Clock reset applied. Typically the receiver  
                              # clock is changed in increments of integer
                              # milliseconds.
uint8 version           # Message version (0x01 for this version).
uint8[2] reserved1      # Reserved

RxmRAWX_Meas[] meas

================================================================================
MSG: ublox_msgs/RxmRAWX_Meas
# see message RxmRAWX
#

float64 prMes             # Pseudorange measurement [m]. GLONASS inter frequency
                          # channel delays are compensated with an internal
                          # calibration table.
float64 cpMes             # Carrier phase measurement [L1 cycles]. The carrier
                          # phase initial ambiguity is initialized using an
                          # approximate value to make the magnitude of
                          # the phase close to the pseudorange
                          # measurement. Clock resets are applied to both
                          # phase and code measurements in accordance
                          # with the RINEX specification.
float32 doMes             # Doppler measurement [Hz] (positive sign for
                          # approaching satellites)
uint8 gnssId              # GNSS identifier (see CfgGNSS for constants)

uint8 svId                # Satellite identifier (see Satellite Numbering)

uint8 reserved0           # Reserved

uint8 freqId              # Only used for GLONASS: This is the frequency
                          # slot + 7 (range from 0 to 13)
uint16 locktime           # Carrier phase locktime counter [ms] 
                          # (maximum 64500 ms)
int8 cno                  # Carrier-to-noise density ratio (signal strength) 
                          # [dB-Hz]
uint8 prStdev             # Estimated pseudorange measurement standard
                          # deviation [m / 0.01*2^n]
uint8 cpStdev             # Estimated carrier phase measurement standard
                          # deviation (note a raw value of 0x0F indicates the
                          # value is invalid) [cycles / 0.004]
uint8 doStdev             # Estimated Doppler measurement standard deviation 
                          # [Hz / 0.002*2^n]

uint8 trkStat             # Tracking status bitfield
uint8 TRK_STAT_PR_VALID = 1       # Pseudorange valid
uint8 TRK_STAT_CP_VALID = 2       # Carrier phase valid
uint8 TRK_STAT_HALF_CYC = 4       # Half cycle valid
uint8 TRK_STAT_SUB_HALF_CYC = 8   # Half cycle subtracted from phase

uint8 reserved1           # Reserved
"""
  # Pseudo-constants
  CLASS_ID = 2
  MESSAGE_ID = 21
  REC_STAT_LEAP_SEC = 1
  REC_STAT_CLK_RESET = 2

  __slots__ = ['rcvTOW','week','leapS','numMeas','recStat','version','reserved1','meas']
  _slot_types = ['float64','uint16','int8','uint8','uint8','uint8','uint8[2]','ublox_msgs/RxmRAWX_Meas[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rcvTOW,week,leapS,numMeas,recStat,version,reserved1,meas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RxmRAWX, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rcvTOW is None:
        self.rcvTOW = 0.
      if self.week is None:
        self.week = 0
      if self.leapS is None:
        self.leapS = 0
      if self.numMeas is None:
        self.numMeas = 0
      if self.recStat is None:
        self.recStat = 0
      if self.version is None:
        self.version = 0
      if self.reserved1 is None:
        self.reserved1 = b'\0'*2
      if self.meas is None:
        self.meas = []
    else:
      self.rcvTOW = 0.
      self.week = 0
      self.leapS = 0
      self.numMeas = 0
      self.recStat = 0
      self.version = 0
      self.reserved1 = b'\0'*2
      self.meas = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dHb3B().pack(_x.rcvTOW, _x.week, _x.leapS, _x.numMeas, _x.recStat, _x.version))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      length = len(self.meas)
      buff.write(_struct_I.pack(length))
      for val1 in self.meas:
        _x = val1
        buff.write(_get_struct_2df4BHb5B().pack(_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.meas is None:
        self.meas = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.rcvTOW, _x.week, _x.leapS, _x.numMeas, _x.recStat, _x.version,) = _get_struct_dHb3B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meas = []
      for i in range(0, length):
        val1 = ublox_msgs.msg.RxmRAWX_Meas()
        _x = val1
        start = end
        end += 32
        (_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1,) = _get_struct_2df4BHb5B().unpack(str[start:end])
        self.meas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dHb3B().pack(_x.rcvTOW, _x.week, _x.leapS, _x.numMeas, _x.recStat, _x.version))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      length = len(self.meas)
      buff.write(_struct_I.pack(length))
      for val1 in self.meas:
        _x = val1
        buff.write(_get_struct_2df4BHb5B().pack(_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.meas is None:
        self.meas = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.rcvTOW, _x.week, _x.leapS, _x.numMeas, _x.recStat, _x.version,) = _get_struct_dHb3B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meas = []
      for i in range(0, length):
        val1 = ublox_msgs.msg.RxmRAWX_Meas()
        _x = val1
        start = end
        end += 32
        (_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1,) = _get_struct_2df4BHb5B().unpack(str[start:end])
        self.meas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2df4BHb5B = None
def _get_struct_2df4BHb5B():
    global _struct_2df4BHb5B
    if _struct_2df4BHb5B is None:
        _struct_2df4BHb5B = struct.Struct("<2df4BHb5B")
    return _struct_2df4BHb5B
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_dHb3B = None
def _get_struct_dHb3B():
    global _struct_dHb3B
    if _struct_dHb3B is None:
        _struct_dHb3B = struct.Struct("<dHb3B")
    return _struct_dHb3B
