# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/RxmRAWX_Meas.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RxmRAWX_Meas(genpy.Message):
  _md5sum = "d6a580262875bf83a377ba14dcdd659f"
  _type = "ublox_msgs/RxmRAWX_Meas"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# see message RxmRAWX
#

float64 prMes             # Pseudorange measurement [m]. GLONASS inter frequency
                          # channel delays are compensated with an internal
                          # calibration table.
float64 cpMes             # Carrier phase measurement [L1 cycles]. The carrier
                          # phase initial ambiguity is initialized using an
                          # approximate value to make the magnitude of
                          # the phase close to the pseudorange
                          # measurement. Clock resets are applied to both
                          # phase and code measurements in accordance
                          # with the RINEX specification.
float32 doMes             # Doppler measurement [Hz] (positive sign for
                          # approaching satellites)
uint8 gnssId              # GNSS identifier (see CfgGNSS for constants)

uint8 svId                # Satellite identifier (see Satellite Numbering)

uint8 reserved0           # Reserved

uint8 freqId              # Only used for GLONASS: This is the frequency
                          # slot + 7 (range from 0 to 13)
uint16 locktime           # Carrier phase locktime counter [ms] 
                          # (maximum 64500 ms)
int8 cno                  # Carrier-to-noise density ratio (signal strength) 
                          # [dB-Hz]
uint8 prStdev             # Estimated pseudorange measurement standard
                          # deviation [m / 0.01*2^n]
uint8 cpStdev             # Estimated carrier phase measurement standard
                          # deviation (note a raw value of 0x0F indicates the
                          # value is invalid) [cycles / 0.004]
uint8 doStdev             # Estimated Doppler measurement standard deviation 
                          # [Hz / 0.002*2^n]

uint8 trkStat             # Tracking status bitfield
uint8 TRK_STAT_PR_VALID = 1       # Pseudorange valid
uint8 TRK_STAT_CP_VALID = 2       # Carrier phase valid
uint8 TRK_STAT_HALF_CYC = 4       # Half cycle valid
uint8 TRK_STAT_SUB_HALF_CYC = 8   # Half cycle subtracted from phase

uint8 reserved1           # Reserved
"""
  # Pseudo-constants
  TRK_STAT_PR_VALID = 1
  TRK_STAT_CP_VALID = 2
  TRK_STAT_HALF_CYC = 4
  TRK_STAT_SUB_HALF_CYC = 8

  __slots__ = ['prMes','cpMes','doMes','gnssId','svId','reserved0','freqId','locktime','cno','prStdev','cpStdev','doStdev','trkStat','reserved1']
  _slot_types = ['float64','float64','float32','uint8','uint8','uint8','uint8','uint16','int8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prMes,cpMes,doMes,gnssId,svId,reserved0,freqId,locktime,cno,prStdev,cpStdev,doStdev,trkStat,reserved1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RxmRAWX_Meas, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prMes is None:
        self.prMes = 0.
      if self.cpMes is None:
        self.cpMes = 0.
      if self.doMes is None:
        self.doMes = 0.
      if self.gnssId is None:
        self.gnssId = 0
      if self.svId is None:
        self.svId = 0
      if self.reserved0 is None:
        self.reserved0 = 0
      if self.freqId is None:
        self.freqId = 0
      if self.locktime is None:
        self.locktime = 0
      if self.cno is None:
        self.cno = 0
      if self.prStdev is None:
        self.prStdev = 0
      if self.cpStdev is None:
        self.cpStdev = 0
      if self.doStdev is None:
        self.doStdev = 0
      if self.trkStat is None:
        self.trkStat = 0
      if self.reserved1 is None:
        self.reserved1 = 0
    else:
      self.prMes = 0.
      self.cpMes = 0.
      self.doMes = 0.
      self.gnssId = 0
      self.svId = 0
      self.reserved0 = 0
      self.freqId = 0
      self.locktime = 0
      self.cno = 0
      self.prStdev = 0
      self.cpStdev = 0
      self.doStdev = 0
      self.trkStat = 0
      self.reserved1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2df4BHb5B().pack(_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1,) = _get_struct_2df4BHb5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2df4BHb5B().pack(_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.prMes, _x.cpMes, _x.doMes, _x.gnssId, _x.svId, _x.reserved0, _x.freqId, _x.locktime, _x.cno, _x.prStdev, _x.cpStdev, _x.doStdev, _x.trkStat, _x.reserved1,) = _get_struct_2df4BHb5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2df4BHb5B = None
def _get_struct_2df4BHb5B():
    global _struct_2df4BHb5B
    if _struct_2df4BHb5B is None:
        _struct_2df4BHb5B = struct.Struct("<2df4BHb5B")
    return _struct_2df4BHb5B
