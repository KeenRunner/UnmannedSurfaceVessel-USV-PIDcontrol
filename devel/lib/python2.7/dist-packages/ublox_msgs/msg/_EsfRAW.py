# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/EsfRAW.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ublox_msgs.msg

class EsfRAW(genpy.Message):
  _md5sum = "b942250c5ec94c6b6e69c63d82d9a946"
  _type = "ublox_msgs/EsfRAW"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ESF-RAW (0x10 0x03)
# Raw sensor measurements
#
# The message contains measurements from the active inertial sensors connected
# to the GNSS chip. Possible data types for the data field are accelerometer,
# gyroscope and temperature readings as described in the ESF Measurement Data
# section. Note that the rate selected in CFG-MSG is not respected. If a
# positive rate is selected then all raw measurements will be output. 
#
# Supported on ADR/UDR products.
#

uint8 CLASS_ID = 16
uint8 MESSAGE_ID = 3

uint8[4] reserved0 # Reserved

EsfRAW_Block[] blocks
================================================================================
MSG: ublox_msgs/EsfRAW_Block
# See ESF-RAW

uint32 data      # Its scaling and unit depends on the type and is
                # the same as in ESF-MEAS
uint32 DATA_FIELD_MASK = 16777215
uint32 DATA_TYPE_MASK = 4278190080    # type of data 
                                      # (0 = no data; 1..255 = data type)
uint32 sTtag     # sensor time tag"""
  # Pseudo-constants
  CLASS_ID = 16
  MESSAGE_ID = 3

  __slots__ = ['reserved0','blocks']
  _slot_types = ['uint8[4]','ublox_msgs/EsfRAW_Block[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reserved0,blocks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsfRAW, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reserved0 is None:
        self.reserved0 = b'\0'*4
      if self.blocks is None:
        self.blocks = []
    else:
      self.reserved0 = b'\0'*4
      self.blocks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      length = len(self.blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.blocks:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.data, _x.sTtag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.blocks is None:
        self.blocks = None
      end = 0
      start = end
      end += 4
      self.reserved0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blocks = []
      for i in range(0, length):
        val1 = ublox_msgs.msg.EsfRAW_Block()
        _x = val1
        start = end
        end += 8
        (_x.data, _x.sTtag,) = _get_struct_2I().unpack(str[start:end])
        self.blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      length = len(self.blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.blocks:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.data, _x.sTtag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.blocks is None:
        self.blocks = None
      end = 0
      start = end
      end += 4
      self.reserved0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blocks = []
      for i in range(0, length):
        val1 = ublox_msgs.msg.EsfRAW_Block()
        _x = val1
        start = end
        end += 8
        (_x.data, _x.sTtag,) = _get_struct_2I().unpack(str[start:end])
        self.blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
